//include : 헤더파일을 여기에 포함시킨다.
/*
실행과정 : 컴파일 -> 빌드 -> 실행
컴파일 : 번역작업
컨트롤 + 쉬프트 + B 로 컴파일 & 빌드 가능
*/
#include <iostream>
using namespace std;
//using namespace std : std라는 네임스페이스를 사용하겠다. -> std:: 생략가능

// C++에 시작점은 main함수이다. main함수는 반드시 있어야한다.
// C++ 표준 기능은 대부분 std 라는 namespace 안에 존재하고 있다. 이름이 곂치는 것을 방지해주기 위한 기능이다
/*
cout : 콘솔창에 출력해주는 기능이다. 뒤어 있는 ""(큰따움표) 안에 있는 문자들을 화면에 출력해준다
문자 여러개를 사용할 때에는 반드시 "" 안에 넣어주고 이런것을 문자열 이라고 한다.
*/
// endl : 개행 문자열 (줄바꿈)
int main() {
	std::cout << "hello" << std::endl;

/*
변수 : 변하는 수, 값이 바뀔 수 있다.
용량의 최소단위 : bit
1byte = 8bit
1kbyte = 1024byte
1mbyte = 1024kbyte
1kbyte = 1024mbyte
1mbyte = 1024gbtye
1gbyte = 1024tbyte

문자를 표현하는 방법 : ASCII 코드 표를 가지고 있다.
false : 0
true : 0이 아닌 모든 수
unsigned : 부호가 없다

종류   l  용량   l  데이터형 l       표현범위         l  unsigned  ㅣ
char   l  1byte  l   문자    l -128 - 127(총: 256)    l   0 - 255
bool   l  1byte  l  참/거짓  l    true / false        l  true / false
short  l  2byte  l   정수    l    -32768 -32767       l  0 - 65535
int    l  4byte  l   정수    l  약 -22억 - 21억       l  0 - 약 43억
float  l  4byte  l실수(부동) l   
double l  8byte  l   실수    l
*/
// = : 대입연산자. 오른쪽에 있는 값을 왼쪽으로 대입한다.

	int Number = 10;
	Number = 20;

	std::cout << Number << std::endl;

	bool bTest = true;
	bTest = false;

	cout << bTest << endl;


	//영문이나 숫자는 1byte , 한글이나 한문 2byte -> char 변수 하나에 저장힘듬
	char cTest = 'a';
	cTest = 'b';
	cout << cTest << endl;
   
	//float 형 선언 뒤에는 f를 붙여줄 것, 아니면 double 됌
	float fNumber = 3.14f;

	cout << fNumber << endl;

	double dNumber = 3.141597;

	cout << dNumber << endl;

	/*
	사칙연산자 : + , - , *, /, %(나머지 연산자) 
	관계연산자 : >, >=(A : B 크거나 같다), <, <=(A : B 작거나 같다), ==(같다), !=(A와 B가 다르다) / ( 값대 값을 연산하여 참/거짓으로 결과를 반환 )
	논리연산자 : AND(&&)->둘 다 참일때만 참, 즉 둘중에 하나라도 거짓이면 거짓, OR(||) , NOT(!) / ( 참/거짓 대 참/거짓을 연산하여 결과값을 참/거짓으로 반환한다. )
	A B AND OR
	0 0  0  0
	0 1  0  1
	1 0  0  1
	1 1  1  1

	A  NOT
	1   0
	0   1

	진수 : 2진수, 8진수 , 10진수, 16진수
	2진수 : 2, 8 , 10 , 16 ( 0 ~ 1 )
	8진수 : 0 ~ 7
	10진수 : 0 ~ 9
	16진수 : 0 ~ 15 : 0 ~ 9 : 10 ~ 15 : a ~ f
	
	진수들은 서로 다른 진수로 변환이 가능하다.


	가장 마지막에 나온 몫부터 역순으로 나머지 값들을 읽는다.
	1010111 이 된다.

	16진수로 변환해보자, 10진수를 바로 16진수로 변환하는 것 보다  2진수로 변환하고 16진수로 변환 하는 것이 쉽다. 

	1010111을 오른쪽으로 부터 네자리씩 끊어서 계산, 16진수 한자리는 2진수 네자리
	0101 0111
	8421 8421

	2진수가 1인부분의 값을 더한다.
	16진수 5 / 7 이 된다.

	비트단위 논리연산자 : 2진수 단위에 연산을 한다. 값 대 값을 연산하여 값으로 반환
	종류 : AND(&), OR(|) , NOT(~ <- 필드), XOR(익스클루시브OR / ^)

	A   B  XOR ( 두 값이 같을 때 false 다를 때 true )
	0   0   0
	1   0   1
	0   1   1
	1   1   0

	87 & 53 = 21
	87 : 1010111
	53 : 110101

	87 & 53 2진수 16진수로 변환 해보자

	먼저 2진수로 변환한다.

	87 / 2 = 43 --- 1
	43 / 2 = 21 --- 1
	21 / 2 = 10 --- 1
	10 /2  = 5  --- 0
	5 /2   = 2  --- 1
	2 / 2  = 1 --- 0

	53 / 2 : 26 --- 1
	26 / 2 : 13 --- 0
	13 / 2 : 6  --- 1
	6 /  2 : 3 --- 0
	3 /  2 : 1 --- 1

	위처럼 2진수로 변환한 후에 2진수 각 자리별로 논리연산을 실행

	 1010111
	&0110101
	 0010101 (XOR)
	   10101 이 나옴
	  

	10진수로 변환하면
    10101 = 1, 2 ,4 ,8 ,16 에서 값이 1인 부분만 더함

	*/

	cout << "10 < 20 = " << (10 < 20) << endl;
	cout << "10 <= 20 = " << (10 <= 20) << endl;
	cout << "10 > 20 = " << (10 > 20) << endl;
	cout << "10 >= 20 = " << (10 >= 20) << endl;
	cout << "10 == 20 = " << (10 == 20) << endl;
	cout << "10 != 20 = " << (10 != 20) << endl;

	cout << "숫자를 입력하세요 : ";
	cin >> Number;

	cout << "10 ~ 20 :" << (10 <= Number && Number <= 20) << endl;
	
	cout << "87 & 53 = " << (87 & 53) << endl;




	return 0;
}